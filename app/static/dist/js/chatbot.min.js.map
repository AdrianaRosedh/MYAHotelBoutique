{"version":3,"sources":["chatbot.js","feature1.js","feature2.js"],"names":["initChatbot","toggleChatbot","chatbotContainer","document","getElementById","classList","contains","remove","window","innerWidth","add","body","focus","closeChatbot","addEventListener","event","chatbotToggle","userInput","closeButton","querySelector","key","activeElement","preventDefault","dragElement","element","let","pos1","pos2","pos3","pos4","header","dragMouseDown","e","clientX","clientY","onmouseup","closeDragElement","onmousemove","elementDrag","style","top","offsetTop","left","offsetLeft","onmousedown","async","chatbox","value","trim","innerHTML","data","await","fetch","method","headers","Content-Type","JSON","stringify","message","json","response","scrollTop","scrollHeight","animation","width","height","bottom","right","maxHeight","borderRadius","display","dispatchEvent","Event","toggle","feature1","console","log","feature2","lang","getAttribute","placeholder"],"mappings":"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","file":"chatbot.min.js","sourcesContent":["export function initChatbot() {\n    function toggleChatbot() {\n        const chatbotContainer = document.getElementById('chatbot-container');\n        if (chatbotContainer.classList.contains('hidden')) {\n            openChatbot();\n        } else {\n            closeChatbot();\n        }\n    }\n\n    function openChatbot() {\n        const chatbotContainer = document.getElementById('chatbot-container');\n        chatbotContainer.classList.remove('hidden');\n        if (window.innerWidth <= 640) {\n            chatbotContainer.classList.add('open'); // Add class to expand on mobile\n        }\n        document.body.classList.add('chatbot-open'); // Apply darkening effect\n        document.getElementById('user-input').focus();\n    }\n\n    function closeChatbot() {\n        const chatbotContainer = document.getElementById('chatbot-container');\n        chatbotContainer.classList.add('hidden');\n        chatbotContainer.classList.remove('open'); // Remove class to revert on mobile\n        document.body.classList.remove('chatbot-open'); // Remove darkening effect\n        document.getElementById('chatbot-toggle').focus();\n    }\n\n    function dragElement(element) {\n        let pos1 = 0, pos2 = 0, pos3 = 0, pos4 = 0;\n        const header = document.getElementById('chatbot-header');\n        if (header) {\n            header.onmousedown = dragMouseDown;\n        } else {\n            element.onmousedown = dragMouseDown;\n        }\n\n        function dragMouseDown(e) {\n            e = e || window.event;\n            e.preventDefault();\n            pos3 = e.clientX;\n            pos4 = e.clientY;\n            document.onmouseup = closeDragElement;\n            document.onmousemove = elementDrag;\n        }\n\n        function elementDrag(e) {\n            e = e || window.event;\n            e.preventDefault();\n            pos1 = pos3 - e.clientX;\n            pos2 = pos4 - e.clientY;\n            pos3 = e.clientX;\n            pos4 = e.clientY;\n            element.style.top = (element.offsetTop - pos2) + \"px\";\n            element.style.left = (element.offsetLeft - pos1) + \"px\";\n        }\n\n        function closeDragElement() {\n            document.onmouseup = null;\n            document.onmousemove = null;\n        }\n    }\n\n    async function sendMessage(event) {\n        if (event.key === 'Enter') {\n            event.preventDefault();  // Prevent form submission\n            const userInput = document.getElementById('user-input').value;\n            if (userInput.trim() === \"\") return;\n\n            const chatbox = document.getElementById('chatbox');\n            chatbox.innerHTML += `<div class=\"text-left\"><strong>You:</strong> ${userInput}</div>`;\n            document.getElementById('user-input').value = '';\n\n            const response = await fetch('/chatbot/chat', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({ message: userInput })\n            });\n            const data = await response.json();\n            chatbox.innerHTML += `<div class=\"text-left\"><strong>Bot:</strong> ${data.response}</div>`;\n            chatbox.scrollTop = chatbox.scrollHeight;\n        }\n    }\n\n    // Add keyboard navigation support\n    document.addEventListener('keydown', function(event) {\n        const chatbotToggle = document.getElementById('chatbot-toggle');\n        const chatbotContainer = document.getElementById('chatbot-container');\n        const userInput = document.getElementById('user-input');\n        const closeButton = chatbotContainer.querySelector('button[aria-label=\"Close Chatbot\"]');\n\n        // Toggle chatbot with Enter key on the toggle button\n        if (event.key === 'Enter' && document.activeElement === chatbotToggle) {\n            toggleChatbot();\n        }\n\n        // Close chatbot with Enter key on the close button\n        if (event.key === 'Enter' && document.activeElement === closeButton) {\n            closeChatbot();\n        }\n\n        // Focus on user input when chatbot is opened\n        if (!chatbotContainer.classList.contains('hidden')) {\n            if (event.key === 'Tab' && document.activeElement === chatbotToggle) {\n                userInput.focus();\n                event.preventDefault();\n            }\n        }\n    });\n\n    document.addEventListener('DOMContentLoaded', function() {\n        dragElement(document.getElementById('chatbot-container'));\n    });\n\n    // Attach event listeners\n    document.getElementById('chatbot-toggle').addEventListener('click', toggleChatbot);\n    document.getElementById('user-input').addEventListener('keypress', sendMessage);\n\n    // Ensure the bounce animation only runs once on load\n    const chatbotToggle = document.getElementById('chatbot-toggle');\n    chatbotToggle.addEventListener('animationend', () => {\n        chatbotToggle.style.animation = 'none';\n    });\n\n    // Make the chatbot container responsive\n    window.addEventListener('resize', () => {\n        const chatbotContainer = document.getElementById('chatbot-container');\n        const chatbotToggle = document.getElementById('chatbot-toggle');\n        if (window.innerWidth <= 640) {\n            chatbotContainer.style.width = '100%';\n            chatbotContainer.style.height = 'auto';\n            chatbotContainer.style.bottom = '0';\n            chatbotContainer.style.right = '0';\n            chatbotContainer.style.left = '0';\n            chatbotContainer.style.maxHeight = '100%';\n            chatbotContainer.style.borderRadius = '0';\n            chatbotToggle.style.display = 'block'; // Ensure toggle button is visible on mobile\n        } else {\n            chatbotContainer.style.width = '20rem';\n            chatbotContainer.style.height = 'auto';\n            chatbotContainer.style.bottom = '1rem';\n            chatbotContainer.style.right = '1rem';\n            chatbotContainer.style.left = 'auto';\n            chatbotContainer.style.maxHeight = '24rem';\n            chatbotContainer.style.borderRadius = '0.5rem';\n            chatbotToggle.style.display = 'block'; // Ensure toggle button is visible on desktop\n        }\n    });\n\n    // Initial trigger to set correct sizes\n    window.dispatchEvent(new Event('resize'));\n\n    // Ensure the chatbot-toggle is visible on mobile\n    window.addEventListener('load', function () {\n        const toggle = document.getElementById('chatbot-toggle');\n        if (window.innerWidth <= 640) {\n            toggle.style.display = 'block';\n        }\n    });\n}\n\n// Call the initialization function when the document is ready\ndocument.addEventListener('DOMContentLoaded', function() {\n    initChatbot();\n});\n\n// JavaScript to dynamically set the placeholder based on language\ndocument.addEventListener('DOMContentLoaded', function() {\n    const lang = document.body.getAttribute('data-lang') || 'en';\n    const userInput = document.getElementById('user-input');\n    if (lang === 'es') {\n        userInput.placeholder = 'Ingresa tu mensaje...';\n    } else {\n        userInput.placeholder = 'Enter your message...';\n    }\n});\n","export function feature1() {\n    console.log('Feature 1 initialized');\n}\n","export function feature2() {\n    console.log('Feature 2 initialized');\n}\n"]}