{"version":3,"sources":["chatbot.js"],"names":["document","addEventListener","initChatbot","setupCloseButton","feature1","feature2","chatbotToggle","getElementById","userInput","sendButton","querySelector","toggleChatbot","console","error","event","key","sendMessage","window","handleResize","closeButton","closeChatbot","innerWidth","openChatbotMobile","chatbotContainer","classList","contains","openChatbot","remove","body","add","focus","chatbox","lang","getAttribute","localStorage","getItem","innerHTML","messages","showInitialMessages","setItem","Swal","fire","html","showCloseButton","showConfirmButton","customClass","popup","width","heightAuto","padding","background","backdrop","allowOutsideClick","allowEscapeKey","didOpen","close","sendMessageSwal","async","preventDefault","userInputValue","value","trim","response","fetch","method","headers","JSON","stringify","message","data","json","scrollTop","scrollHeight","historyKey","delay","forEach","setTimeout","style","height","bottom","right","left","maxHeight","borderRadius"],"mappings":"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","file":"chatbot.min.js","sourcesContent":["document.addEventListener('DOMContentLoaded', function() {\n    initChatbot();\n    setupCloseButton();\n    feature1();\n    feature2();\n});\n\nexport function feature1() {\n    // Feature 1 logic\n}\n\nexport function feature2() {\n    // Feature 2 logic\n}\n\nfunction initChatbot() {\n    const chatbotToggle = document.getElementById('chatbot-toggle');\n    const userInput = document.getElementById('user-input');\n    const sendButton = document.querySelector('.send-button');\n    \n    if (chatbotToggle) {\n        chatbotToggle.addEventListener('click', toggleChatbot);\n    } else {\n        console.error('Chatbot toggle button not found');\n    }\n\n    if (userInput) {\n        userInput.addEventListener('keypress', function(event) {\n            if (event.key === 'Enter') {\n                sendMessage(event);\n            }\n        });\n    } else {\n        console.error('User input field not found');\n    }\n\n    if (sendButton) {\n        sendButton.addEventListener('click', sendMessage);\n        sendButton.addEventListener('touchstart', sendMessage);\n    } else {\n        console.error('Send button not found');\n    }\n\n    window.addEventListener('resize', handleResize);\n    handleResize();\n}\n\nfunction setupCloseButton() {\n    const closeButton = document.getElementById('close-chatbot');\n    if (closeButton) {\n        closeButton.addEventListener('click', closeChatbot);\n    } else {\n        console.error('Close button not found');\n    }\n}\n\nfunction toggleChatbot() {\n    if (window.innerWidth <= 640) {\n        openChatbotMobile();\n    } else {\n        const chatbotContainer = document.getElementById('chatbot-container');\n        if (chatbotContainer && chatbotContainer.classList.contains('hidden')) {\n            openChatbot();\n        } else if (chatbotContainer) {\n            closeChatbot();\n        } else {\n            console.error('Chatbot container not found');\n        }\n    }\n}\n\nfunction openChatbot() {\n    const chatbotContainer = document.getElementById('chatbot-container');\n    if (chatbotContainer) {\n        chatbotContainer.classList.remove('hidden');\n        document.body.classList.add('chatbot-open');\n        document.getElementById('user-input').focus();\n\n        const chatbox = document.getElementById('chatbox');\n        const lang = document.body.getAttribute('data-lang') || 'en';\n\n        if (!localStorage.getItem('initialMessagesShown')) {\n            let messages;\n            if (lang === 'es') {\n                messages = [\n                    \"Â¡Hola! ðŸŒŸ\",\n                    \"Â¿Tienes preguntas sobre MYA, Olivea o DiVino?\",\n                    \"Â¡PregÃºntame, estoy aquÃ­ para ayudarte!\"\n                ];\n            } else {\n                messages = [\n                    \"Hey there! ðŸŒŸ\",\n                    \"Got questions about MYA, Olivea, or DiVino?\",\n                    \"Ask away, I'm here to help!\"\n                ];\n            }\n            showInitialMessages(chatbox, messages, 'chatHistoryDesktop');\n            localStorage.setItem('initialMessagesShown', 'true');\n        } else {\n            chatbox.innerHTML = localStorage.getItem('chatHistoryDesktop') || '';\n        }\n    } else {\n        console.error('Chatbot container not found');\n    }\n}\n\nfunction closeChatbot() {\n    const chatbotContainer = document.getElementById('chatbot-container');\n    if (chatbotContainer) {\n        chatbotContainer.classList.add('hidden');\n        document.body.classList.remove('chatbot-open');\n        document.getElementById('chatbot-toggle').focus();\n    } else {\n        console.error('Chatbot container not found');\n    }\n}\n\nfunction openChatbotMobile() {\n    const lang = document.body.getAttribute('data-lang') || 'en';\n    Swal.fire({\n        html: `\n            <div id=\"chatbot-container-swal\" class=\"flex flex-col w-full h-full\">\n                <div id=\"chatbot-header-swal\" class=\"p-4 flex justify-between items-center\">\n                    <img src=\"/static/dist/img/svg/mya-ai-bounce.svg\" alt=\"Avatar\" class=\"w-16 h-16\">\n                    <button id=\"close-chatbot-swal\" class=\"text-white\" aria-label=\"Close Chatbot\">&times;</button>\n                </div>\n                <div id=\"chatbox-swal\" class=\"flex-1 p-4 overflow-auto\"></div>\n                <div class=\"input-area-swal p-2 flex items-center\">\n                    <input type=\"text\" id=\"user-input-swal\" class=\"p-2 flex-grow focus:outline-none\">\n                    <button id=\"send-button-swal\" class=\"send-button-swal\" aria-label=\"Send message\">\n                        <img src=\"/static/dist/img/svg/sending.svg\" alt=\"Sending\">\n                    </button>\n                </div>\n            </div>\n        `,\n        showCloseButton: false,\n        showConfirmButton: false,\n        customClass: {\n            popup: 'chatbot-swal-popup'\n        },\n        width: '24rem',\n        heightAuto: false,\n        padding: '0',\n        background: '#fff',\n        backdrop: true,\n        allowOutsideClick: false,\n        allowEscapeKey: false,\n        didOpen: () => {\n            const chatbox = document.getElementById('chatbox-swal');\n            if (!localStorage.getItem('initialMessagesShownMobile')) {\n                let messages;\n                if (lang === 'es') {\n                    messages = [\n                        \"Â¡Hola! ðŸŒŸ\",\n                        \"Â¿Tienes preguntas sobre MYA, Olivea o DiVino?\",\n                        \"Â¡PregÃºntame, estoy aquÃ­ para ayudarte!\"\n                    ];\n                } else {\n                    messages = [\n                        \"Hey there! ðŸŒŸ\",\n                        \"Got questions about MYA, Olivea, or DiVino?\",\n                        \"Ask away, I'm here to help!\"\n                    ];\n                }\n                showInitialMessages(chatbox, messages, 'chatHistoryMobile');\n                localStorage.setItem('initialMessagesShownMobile', 'true');\n            } else {\n                chatbox.innerHTML = localStorage.getItem('chatHistoryMobile') || '';\n            }\n\n            const closeButton = document.getElementById('close-chatbot-swal');\n            if (closeButton) {\n                closeButton.addEventListener('click', () => Swal.close());\n            } else {\n                console.error('Close button for Swal modal not found');\n            }\n\n            const userInput = document.getElementById('user-input-swal');\n            if (userInput) {\n                userInput.addEventListener('keypress', (event) => {\n                    if (event.key === 'Enter') {\n                        sendMessageSwal(event);\n                    }\n                });\n            } else {\n                console.error('User input for Swal modal not found');\n            }\n\n            const sendButton = document.getElementById('send-button-swal');\n            if (sendButton) {\n                sendButton.addEventListener('click', sendMessageSwal);\n                sendButton.addEventListener('touchstart', sendMessageSwal);\n            } else {\n                console.error('Send button for Swal modal not found');\n            }\n        }\n    });\n}\n\nasync function sendMessageSwal(event) {\n    event.preventDefault();\n\n    const userInput = document.getElementById('user-input-swal');\n    const userInputValue = userInput.value;\n    if (userInputValue.trim() === \"\") return;\n\n    const chatbox = document.getElementById('chatbox-swal');\n    chatbox.innerHTML += `<div class=\"text-left chatbot-message\"><strong>You:</strong> ${userInputValue}</div>`;\n    userInput.value = '';\n\n    try {\n        const response = await fetch('/chatbot/chat', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({ message: userInputValue })\n        });\n        const data = await response.json();\n        chatbox.innerHTML += `<div class=\"text-left chatbot-message\"><strong>Bot:</strong> ${data.response}</div>`;\n        chatbox.scrollTop = chatbox.scrollHeight;\n        localStorage.setItem('chatHistoryMobile', chatbox.innerHTML);\n    } catch (error) {\n        console.error('Error sending message:', error);\n    }\n}\n\nasync function sendMessage(event) {\n    event.preventDefault();\n\n    const userInput = document.getElementById('user-input');\n    const userInputValue = userInput.value;\n    if (userInputValue.trim() === \"\") return;\n\n    const chatbox = document.getElementById('chatbox');\n    chatbox.innerHTML += `<div class=\"text-left chatbot-message\"><strong>You:</strong> ${userInputValue}</div>`;\n    userInput.value = '';\n\n    try {\n        const response = await fetch('/chatbot/chat', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({ message: userInputValue })\n        });\n        const data = await response.json();\n        chatbox.innerHTML += `<div class=\"text-left chatbot-message\"><strong>Bot:</strong> ${data.response}</div>`;\n        chatbox.scrollTop = chatbox.scrollHeight;\n        localStorage.setItem('chatHistoryDesktop', chatbox.innerHTML);\n    } catch (error) {\n        console.error('Error sending message:', error);\n    }\n}\n\nfunction showInitialMessages(chatbox, messages, historyKey) {\n    chatbox.innerHTML = '';\n    let delay = 0;\n    messages.forEach((message) => {\n        setTimeout(() => {\n            chatbox.innerHTML += `<div class=\"text-left chatbot-message\"><strong>Bot:</strong> ${message}</div>`;\n            chatbox.scrollTop = chatbox.scrollHeight;\n            localStorage.setItem(historyKey, chatbox.innerHTML);\n        }, delay);\n        delay += 1000;\n    });\n}\n\nfunction handleResize() {\n    const chatbotContainer = document.getElementById('chatbot-container');\n    if (!chatbotContainer) {\n        console.error('Chatbot container not found during resize');\n        return;\n    }\n\n    if (window.innerWidth <= 640) {\n        chatbotContainer.style.width = '100%';\n        chatbotContainer.style.height = 'auto';\n        chatbotContainer.style.bottom = '0';\n        chatbotContainer.style.right = '0';\n        chatbotContainer.style.left = '0';\n        chatbotContainer.style.maxHeight = '100%';\n        chatbotContainer.style.borderRadius = '0';\n    } else {\n        chatbotContainer.style.width = '20rem';\n        chatbotContainer.style.height = 'auto';\n        chatbotContainer.style.bottom = '1rem';\n        chatbotContainer.style.right = '1rem';\n        chatbotContainer.style.left = 'auto';\n        chatbotContainer.style.maxHeight = '24rem';\n        chatbotContainer.style.borderRadius = '0.5rem';\n    }\n}\n"]}